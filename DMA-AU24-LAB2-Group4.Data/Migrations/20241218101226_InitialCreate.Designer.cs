// <auto-generated />
using System;
using DMA_AU24_LAB2_Group4.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DMA_AU24_LAB2_Group4.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241218101226_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PerformanceId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            PerformanceId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            PerformanceId = 3
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 1,
                            PerformanceId = 4
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 2,
                            PerformanceId = 6
                        });
                });

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Concerts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Experience the best of Ed Sheeran live!",
                            Title = "Ed Sheeran World Tour"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A musical journey through Taylor Swift's iconic albums.",
                            Title = "Taylor Swift Eras Tour"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Kendrick in his absolute prime, destroying his enemies.",
                            Title = "Kendrick Lamar GNX Summer World Tour"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Bruno Mars isn't just a performer; he's a showman. His world tours are legendary, delivering unforgettable experiences that blend incredible musicianship, dazzling choreography, and a pure party atmosphere.",
                            Title = "Bruno Mars Die With A Smile World Tour"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A celebration of Beyoncé's iconic Renaissance album.",
                            Title = "Beyoncé Renaissance World Tour"
                        });
                });

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "hashed_password_1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "hashed_password_2"
                        });
                });

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PerformanceDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.ToTable("Performances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            ConcertId = 1,
                            Country = "USA",
                            PerformanceDateAndTime = new DateTime(2025, 6, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Madison Square Garden"
                        },
                        new
                        {
                            Id = 2,
                            City = "Los Angeles",
                            ConcertId = 1,
                            Country = "USA",
                            PerformanceDateAndTime = new DateTime(2025, 6, 3, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Staples Center"
                        },
                        new
                        {
                            Id = 3,
                            City = "Stockholm",
                            ConcertId = 1,
                            Country = "Sweden",
                            PerformanceDateAndTime = new DateTime(2025, 6, 5, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Globen"
                        },
                        new
                        {
                            Id = 4,
                            City = "London",
                            ConcertId = 2,
                            Country = "UK",
                            PerformanceDateAndTime = new DateTime(2025, 7, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Wembley Stadium"
                        },
                        new
                        {
                            Id = 5,
                            City = "London",
                            ConcertId = 2,
                            Country = "UK",
                            PerformanceDateAndTime = new DateTime(2025, 7, 12, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "O2 Arena"
                        },
                        new
                        {
                            Id = 6,
                            City = "Berlin",
                            ConcertId = 2,
                            Country = "Germany",
                            PerformanceDateAndTime = new DateTime(2025, 8, 15, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Olympiastadion"
                        },
                        new
                        {
                            Id = 7,
                            City = "Paris",
                            ConcertId = 3,
                            Country = "France",
                            PerformanceDateAndTime = new DateTime(2025, 8, 17, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Stade de France"
                        },
                        new
                        {
                            Id = 8,
                            City = "Mexico City",
                            ConcertId = 3,
                            Country = "Mexico",
                            PerformanceDateAndTime = new DateTime(2025, 9, 20, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Estadio Azteca"
                        },
                        new
                        {
                            Id = 9,
                            City = "Santiago",
                            ConcertId = 3,
                            Country = "Chile",
                            PerformanceDateAndTime = new DateTime(2025, 9, 22, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Estadio Monumental"
                        },
                        new
                        {
                            Id = 10,
                            City = "Milano",
                            ConcertId = 4,
                            Country = "Italy",
                            PerformanceDateAndTime = new DateTime(2025, 10, 22, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "San Siro"
                        },
                        new
                        {
                            Id = 11,
                            City = "Rome",
                            ConcertId = 4,
                            Country = "Italy",
                            PerformanceDateAndTime = new DateTime(2025, 10, 24, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Stadio Olimpico"
                        },
                        new
                        {
                            Id = 12,
                            City = "Lisbon",
                            ConcertId = 5,
                            Country = "Portugal",
                            PerformanceDateAndTime = new DateTime(2025, 11, 22, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Estádio da Luz"
                        },
                        new
                        {
                            Id = 13,
                            City = "Barcelona",
                            ConcertId = 5,
                            Country = "Spain",
                            PerformanceDateAndTime = new DateTime(2025, 11, 24, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Estadi Olímpic Lluís Companys"
                        },
                        new
                        {
                            Id = 14,
                            City = "Porto",
                            ConcertId = 5,
                            Country = "Portugal",
                            PerformanceDateAndTime = new DateTime(2025, 12, 22, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Venue = "Estádio do Dragão"
                        });
                });

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Booking", b =>
                {
                    b.HasOne("DMA_AU24_LAB2_Group4.Data.Entity.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DMA_AU24_LAB2_Group4.Data.Entity.Performance", "Performance")
                        .WithMany("Bookings")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Performance", b =>
                {
                    b.HasOne("DMA_AU24_LAB2_Group4.Data.Entity.Concert", "Concert")
                        .WithMany("Performances")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Concert", b =>
                {
                    b.Navigation("Performances");
                });

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DMA_AU24_LAB2_Group4.Data.Entity.Performance", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
